/*
 * Copyright (c) 2013, 2020, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the LICENSE file that accompanied this code.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */


def closedDir = file("$projectDir/../rt-closed")
def sdk = project.hasProperty("ANDROID_SDK") ? "${ANDROID_SDK}" : "/opt/android-sdk";
def ndk = project.hasProperty("ANDROID_NDK") ? "${ANDROID_NDK}" : "/opt/android-ndk";
def sdk_target = "android-25"
def ndk_target="android-21"
def platform="aarch64-linux-android21"


ext.ANDROID = [:]
ANDROID.compileSwing = false;
ANDROID.compileSWT = false;
ANDROID.compileDesignTime = false;
ANDROID.glassPlatform = "android"
ANDROID.armArch = "arm64-v8a"
ANDROID.libDest = "lib"
ANDROID.jfxdvklib = "jfxdvk.jar"
ANDROID.library = { name -> return IS_STATIC_BUILD ? "lib${name}.a" : "lib${name}.so" as String }
ANDROID.includeMonocle = true
ANDROID.includeLens = false
ANDROID.canBuild = true

def toolchainHome = "$ndk/toolchains/llvm"
def compilerHome = "$toolchainHome/prebuilt/linux-x86_64"
def freetypeDir = project.hasProperty("FREETYPE_DIR") ? "${FREETYPE_DIR}" : null
def compileNativeText = freetypeDir != null

def compiler = file("$compilerHome/bin/clang").getAbsolutePath()
def linker =  IS_STATIC_BUILD ? file("$compilerHome/bin/llvm-ar").getAbsolutePath() : file("$compilerHome/bin/clang").getAbsolutePath()

// Log the settings we're building with
logger.quiet("ANDROID_SDK: $sdk")
logger.quiet("ANDROID_SDK_TARGET: $sdk_target")
logger.quiet("ANDROID_NDK: $ndk")
logger.quiet("ANDROID_NDK_TARGET: $ndk_target")
logger.quiet("FREETYPE_DIR: $freetypeDir")
logger.quiet("Compile native text: $compileNativeText")
logger.quiet("Android Compiler: $compiler")
logger.quiet("Android Linker: $linker")

//exclude from build
project(":swing") {
    apply plugin: 'java'

    compileJava {
        enabled = false
    }
}

project(":fxml") {
    apply plugin: 'java'

    compileJava {
        enabled = true
    }
}

allprojects() {
    repositories {
        mavenCentral()
    }
}


project(":base") {
    apply plugin: 'java'
}

project(":web") {

}

project(":graphics") {

    apply plugin: 'java'

    sourceSets.main.java {
        exclude "com/sun/glass/ui/swt/**"
    }

    afterEvaluate {
        if (compileNativeText) {
            addNative(project, "fontNativeFreetype")
        }
        if (compileNativeText) {
            tasks["native"].dependsOn("nativeFontNativeFreetype")
        }
        tasks["ccAndroidPrismSW"].enabled = false;
        tasks["linkAndroidPrismSW"].enabled = false;

    }
}

project(":controls") {

    apply plugin: 'java'

    task copyResources()  {
        copy {
            from ("src/android/resources")
            into ("build/classes/java/main/javafx.controls")
        }
    }

    assemble.dependsOn("copyResources");

}

ANDROID.jfxrtJarExcludes = [
    "**/*.hlsl",
    "com/sun/glass/ui/win",
    "com/sun/glass/ui/accessible/win",
    "com/sun/prism/j2d",
    "com/sun/prism/sw",
    "com/sun/glass/ui/accessible/mac",
    "com/sun/glass/ui/ios",
    "com/sun/glass/ui/swt", // SWT glass
    "com/oracle/dalvik",
    // "javafx/scene/media", //exclude all media for now
    // "com/sun/media",
    // "com/sun/javafx/media",
    "com/sun/javafx/font/directwrite", //exclude non freetype font support
    "com/sun/javafx/font/coretext",
    // "com/sun/javafx/font/freetype/Pango*",
    // "com/sun/javafx/font/freetype/OSPango*",
    // "com/sun/webkit",   //exclude all WebView for now
    // "com/sun/javafx/webkit",
    // "com/sun/javafx/scene/web",
    // "javafx/scene/web",
    // "com/sun/javafx/sg/prism/NGWeb*",
    // "com/sun/javafx/sg/prism/web*",
    "javafx/print", //exclude printing
    "com/sun/javafx/print",
    "com/sun/javafx/tk/Print*"
]

def text = (compileNativeText) ? "native" : ""

ANDROID.javafxPlatformProperties = """
javafx.platform=android
android.javax.xml.stream.XMLInputFactory=com.sun.xml.stream.ZephyrParserFactory
android.javax.xml.stream.XMLOutputFactory=com.sun.xml.stream.ZephyrWriterFactory
android.javax.xml.stream.XMLEventFactory=com.sun.xml.stream.events.ZephyrEventFactory
android.glass.platform=Monocle
android.prism.verbose=true
ANDROID.prism.verbose=true
android.prism.glDepthSize=16
android.prism.lcdtext=false
android.prism.debugfonts=true
android.prism.text=$text
android.embedded=monocle
android.prism.allowhidpi=true
android.prism.maxTextureSize=2048
android.prism.dirtyopts=true
android.prism.vsync=false
android.use.egl=true
android.com.sun.javafx.isEmbedded=true
com.sun.javafx.gestures.zoom=true
com.sun.javafx.gestures.rotate=true
com.sun.javafx.gestures.scroll=true
"""
def sysroot = "$ndk/platforms/$ndk_target/arch-arm"

def ccFlags = ["-target",platform, "-c", "-I$JDK_HOME/include", "-I$JDK_HOME/include/linux", "-DANDROID_NDK", "-DANDROID_VM"]
if ( IS_STATIC_BUILD )  {
    ccFlags += "-DSTATIC_BUILD"
}


def ccOptFlags = ["-fPIC", "-ffunction-sections", "-funwind-tables","-fstack-protector",
                  "-Os", "-O2", "-fno-strict-aliasing", "-fomit-frame-pointer"]
def ccWarnFlags = ["-Wa,--noexecstack"]
def ccArchFlags = []
def ccDebugFlags = [IS_DEBUG_NATIVE ? "-DDEBUG" : "-DNDEBUG"]
def ccDefaultIncludeFlags = ["-I$ndk/platforms/$ndk_target/arch-arm/usr/include"]

def linkFlags = IS_STATIC_BUILD ? [] : ["-target", platform,
                 "-Wl,--no-undefined", "-Wl,-z,noexecstack", "-lc", "-lm", "-shared",
                 "-L$ndk/platforms/$ndk_target/arch-arm/usr/lib", "-landroid", "-llog"]

ANDROID.webview = [:]
ANDROID.webview.javahSource = files("${project("web").buildDir}/classes/android")
ANDROID.webview.javahClasspath = files("${project("web").buildDir}/classes/android")
ANDROID.webview.javahInclude = [
    "com/sun/webkit/NativeWebView.class"
]
ANDROID.webview.nativeSource = [
    files("${project("web").projectDir}/src/android/native/native_webview.c",
"${project("web").projectDir}/src/android/native/android_webview.c")
]
ANDROID.webview.compiler = compiler
ANDROID.webview.linker = linker
ANDROID.webview.lib = "webview"
ANDROID.webview.ccFlags = [ccFlags, ccWarnFlags, ccArchFlags, ccOptFlags,
    ccDebugFlags, ccDefaultIncludeFlags].flatten()
ANDROID.webview.linkFlags = IS_STATIC_BUILD ? [linkFlags].flatten() : [linkFlags, "-ldl", "-llog"].flatten()

ANDROID.dvkwebview = [:]
ANDROID.dvkwebview.javahSource = files("${project("web").buildDir}/classes/android")
ANDROID.dvkwebview.javahClasspath = files("${project("web").buildDir}/classes/android")
ANDROID.dvkwebview.javahInclude = [
    "com/sun/webkit/NativeWebView.class"
]
ANDROID.dvkwebview.nativeSource = [
    file("${project("web").projectDir}/src/android/native/android_webview.c")
]
ANDROID.dvkwebview.compiler = compiler
ANDROID.dvkwebview.linker = linker
ANDROID.dvkwebview.lib = "android_webview"
ANDROID.dvkwebview.ccFlags = [ccFlags, ccWarnFlags, ccArchFlags, ccOptFlags,
    ccDebugFlags, ccDefaultIncludeFlags].flatten()
ANDROID.dvkwebview.linkFlags = IS_STATIC_BUILD ? [linkFlags].flatten() : [linkFlags, "-ldl", "-llog"].flatten()

ANDROID.glass = [:]
ANDROID.glass.variants = []
ANDROID.glass.variants = ["monocle"]
ANDROID.glass.javahSource = files("${project("graphics").buildDir}/classes/dalvik",
 "${project("graphics").buildDir}/classes/main")
ANDROID.glass.javahClasspath = files("${project("graphics").buildDir}/classes/main",
 "${project("graphics").buildDir}/classes/dalvik",
 "${project("base").buildDir}/classes/main",
 "$sdk/platforms/$sdk_target/android.jar")
ANDROID.glass.javahInclude = [
    "javafxports/android/**",
    "com/sun/glass/ui/monocle/*",
    "com/sun/glass/ui/monocle/util/*",
    "com/sun/glass/events/**",
    "com/sun/glass/ui/*",
    "com/sun/glass/ui/android/*",
    "com/sun/glass/ui/lens/*"]


def monocleCFlags = [ccFlags, ccWarnFlags, ccArchFlags, ccOptFlags,
    ccDebugFlags, ccDefaultIncludeFlags, "-DISEGLFB",
    "-I", file("${project("graphics").projectDir}/src/main/native-glass/monocle/"),
    "-I", file("${project("graphics").projectDir}/src/dalvik/native/")
].flatten()

ANDROID.glass.monocle = [:]
ANDROID.glass.monocle.nativeSource = [
        file("${project("graphics").projectDir}/src/main/native-glass/monocle"),
        file("${project("graphics").projectDir}/src/main/native-glass/monocle/android"),
        file("${project("graphics").projectDir}/src/main/native-glass/monocle/util") ]
ANDROID.glass.monocle.compiler = compiler
ANDROID.glass.monocle.ccFlags = monocleCFlags
ANDROID.glass.monocle.linker = linker
ANDROID.glass.monocle.linkFlags =  IS_STATIC_BUILD ? [linkFlags].flatten() : [linkFlags, "-ldl", "-llog", "-landroid", "-lGLESv2", "-lEGL"].flatten()

ANDROID.glass.monocle.lib = "glass_monocle"

ANDROID.javafxPlatformDefault="glass"

def monoclePlatformAdditions = """
monocle.glass.platform=Monocle
monocle.prism.order=es2,sw
monocle.prism.lcdtext=false
monocle.prism.maxvram=128m
monocle.prism.targetvram=112m
monocle.use.egl=true
monocle.use.gles2=true
monocle.embedded=monocle
monocle.com.sun.javafx.isEmbedded=true
monocle.doNativeComposite=true
monocle.com.sun.javafx.scene.control.skin.FXVK.cache=true
monocle.prism.glDepthSize=0
monocle.com.sun.javafx.gestures.zoom=true
monocle.com.sun.javafx.gestures.rotate=true
monocle.com.sun.javafx.gestures.scroll=true"""

ANDROID.prism = [:]
ANDROID.prism.javahInclude = ["com/sun/prism/impl/**/*", "com/sun/prism/PresentableState*"]
ANDROID.prism.nativeSource = file("${project("graphics").projectDir}/src/main/native-prism")
ANDROID.prism.compiler = compiler
ANDROID.prism.ccFlags = [ccFlags, ccWarnFlags, ccArchFlags, ccOptFlags,
    ccDebugFlags, ccDefaultIncludeFlags].flatten()
ANDROID.prism.linker = linker
ANDROID.prism.linkFlags = [linkFlags].flatten()
ANDROID.prism.lib = "prism_common"

ANDROID.prismSW = [:]
ANDROID.prismSW.javahInclude = ["com/sun/pisces/**/*"]
ANDROID.prismSW.nativeSource = file("${project("graphics").projectDir}/src/main/native-prism-sw")
ANDROID.prismSW.compiler = compiler
ANDROID.prismSW.ccFlags = [ccFlags, ccWarnFlags, ccArchFlags, ccOptFlags,
    ccDebugFlags, ccDefaultIncludeFlags].flatten()
ANDROID.prismSW.linker = linker
ANDROID.prismSW.linkFlags = [linkFlags].flatten()
ANDROID.prismSW.lib = "prism_sw"

ANDROID.decora = [:]
ANDROID.decora.compiler = compiler
ANDROID.decora.ccFlags = [ccFlags, ccWarnFlags, ccArchFlags, ccOptFlags,
    ccDebugFlags, ccDefaultIncludeFlags].flatten()
ANDROID.decora.linker = linker
ANDROID.decora.linkFlags = [linkFlags].flatten()
ANDROID.decora.lib = "decora_sse"

ANDROID.iio = [:]
ANDROID.iio.javahInclude = ["com/sun/javafx/iio/**/*"]
ANDROID.iio.nativeSource = [
    file("${project("graphics").projectDir}/src/main/native-iio"),
    file("${project("graphics").projectDir}/src/main/native-iio/libjpeg")]
ANDROID.iio.compiler = compiler
ANDROID.iio.ccFlags = [ccFlags, ccWarnFlags, ccArchFlags, ccOptFlags,
    ccDebugFlags, ccDefaultIncludeFlags].flatten()
ANDROID.iio.linker = linker
ANDROID.iio.linkFlags = [linkFlags].flatten()
ANDROID.iio.lib = "javafx_iio"

ANDROID.prismES2 = [:]
ANDROID.prismES2.variants = ["monocle"]
ANDROID.prismES2.javahInclude = ["com/sun/prism/es2/**/*"]

ANDROID.prismES2.monocle= [:]
ANDROID.prismES2.monocle.nativeSource = [
    file("${project("graphics").projectDir}/src/main/native-prism-es2"),
    file("${project("graphics").projectDir}/src/main/native-prism-es2/GL"),
    file("${project("graphics").projectDir}/src/main/native-prism-es2/eglWrapper"),
    file("${project("graphics").projectDir}/src/main/native-prism-es2/monocle")
]
ANDROID.prismES2.monocle.compiler = compiler
ANDROID.prismES2.monocle.ccFlags = [ccFlags, ccWarnFlags, ccArchFlags, ccOptFlags,
    ccDebugFlags, ccDefaultIncludeFlags, "-DIS_EGLFB"].flatten()
ANDROID.prismES2.monocle.linker = linker
ANDROID.prismES2.monocle.linkFlags = IS_STATIC_BUILD ? [linkFlags].flatten() : [linkFlags, "-ldl", "-llog", "-lGLESv2", "-lEGL"].flatten()
ANDROID.prismES2.monocle.lib = "prism_es2_monocle"

ANDROID.font = [:]
ANDROID.font.javahInclude = [
        "com/sun/javafx/font/**/*",
        "com/sun/javafx/text/**/*"]
ANDROID.font.nativeSource = [file("$closedDir/javafx-font-native/src")]
ANDROID.font.compiler = compiler
ANDROID.font.ccFlags = [ccFlags, ccWarnFlags, ccArchFlags, ccOptFlags,
    ccDebugFlags, ccDefaultIncludeFlags].flatten()
ANDROID.font.linker = linker
ANDROID.font.linkFlags = [linkFlags].flatten()
ANDROID.font.lib = "javafx_font"

if (compileNativeText) {
    ANDROID.fontNativeFreetype = [:]
    ANDROID.fontNativeFreetype.javahInclude = [
        "com/sun/javafx/font/freetype/OSFreetype.class"
    ]
    ANDROID.fontNativeFreetype.nativeSource = [
        file("${project("graphics").projectDir}/src/main/native-font/freetype.c")
    ]
    ANDROID.fontNativeFreetype.compiler = compiler
    ANDROID.fontNativeFreetype.linker = linker
    ANDROID.fontNativeFreetype.lib = "javafx_font_freetype"

    ccFlags += ["-D_ENABLE_HARFBUZZ"]

    ANDROID.fontNativeFreetype.ccFlags =
        [ccFlags, ccWarnFlags, ccArchFlags, ccOptFlags,
        ccDebugFlags, ccDefaultIncludeFlags,
        "-I$freetypeDir/include", "-I$freetypeDir/include/freetype2"].flatten()

    ANDROID.fontNativeFreetype.linkFlags =
IS_STATIC_BUILD ? [linkFlags].flatten() : 
        [linkFlags, "-llog",
         "-L$freetypeDir/lib", "$freetypeDir/lib/libfreetype.a"].flatten()
}

ANDROID.media = [:]
ext.IS_COMPILE_PANGO = false
