annotation.processing.enabled=true
annotation.processing.enabled.in.editor=false
annotation.processing.processors.list=
annotation.processing.run.all.processors=true
annotation.processing.source.output=${build.generated.sources.dir}/ap-source-output
application.title=Ensemble
application.vendor=Oracle
build.classes.dir=${build.dir}/classes
build.classes.excludes=**/*.java,**/*.form
# This directory is removed when the project is cleaned:
build.dir=build
build.generated.dir=${build.dir}/generated
build.generated.sources.dir=${build.dir}/generated-sources
# Only compile against the classpath explicitly listed here:
build.sysclasspath=ignore
build.test.classes.dir=${build.dir}/test/classes
build.test.results.dir=${build.dir}/test/results
# Directory into which to copy the cssref documentation
build.cssref.dir=${build.dir}/sources/cssref
# Directory into which to copy the third-party legal files
build.legal.dir=${build.dir}/sources/legal
# Uncomment to specify the preferred debugger connection transport:
#debug.transport=dt_socket
debug.classpath=\
    ${run.classpath}
debug.test.classpath=\
    ${run.test.classpath}
# This directory is removed when the project is cleaned:
dist.dir=dist
dist.jar=${dist.dir}/Ensemble8.jar
dist.javadoc.dir=${dist.dir}/javadoc
endorsed.classpath=
excludes=
lucene.version=7.7.3
file.reference.lucene-core.jar=lib/lucene-core-${lucene.version}.jar
file.reference.lucene-grouping.jar=lib/lucene-grouping-${lucene.version}.jar
file.reference.lucene-queryparser.jar=lib/lucene-queryparser-${lucene.version}.jar
includes=**
jar.archive.disabled=${jnlp.enabled}
jar.compress=true
jar.index=${jnlp.enabled}
javac.classpath=\
    ${file.reference.lucene-core.jar}:\
    ${file.reference.lucene-grouping.jar}:\
    ${file.reference.lucene-queryparser.jar}
# Space-separated list of extra javac options
compile.patch=@../../../build/compile.args
javac.compilerargs=${compile.patch}
javac.deprecation=false
javac.processorpath=\
    ${javac.classpath}
javac.source=1.9
javac.target=1.9
javac.test.classpath=\
    ${javac.classpath}:\
    ${build.classes.dir}
javac.test.processorpath=\
    ${javac.test.classpath}
javadoc.additionalparam=-tag preview:X -tag sampleName:X -tag related:X -tag embedded:X -tag playground:X -tag conditionalFeatures:X -tag docUrl:X -tag highlight:X
javadoc.author=false
javadoc.encoding=${source.encoding}
javadoc.noindex=false
javadoc.nonavbar=false
javadoc.notree=false
javadoc.private=false
javadoc.splitindex=true
javadoc.use=true
javadoc.version=false
javadoc.windowtitle=
jnlp.codebase.type=no.codebase
jnlp.descriptor=application
jnlp.enabled=false
jnlp.mixed.code=default
jnlp.offline-allowed=false
jnlp.signed=false
jnlp.signing=
jnlp.signing.alias=
jnlp.signing.keystore=
# Directory into which to copy the third-party legal files
legal.dir=legal
main.class=ensemble.EnsembleApp
manifest.file=manifest.mf
meta.inf.dir=${src.dir}/META-INF
mkdist.disabled=true
platform.active=JDK_1.9
run.classpath=\
    ${javac.classpath}:\
    ${build.classes.dir}
# Space-separated list of JVM arguments used when running the project.
# You may also define separate properties like run-sys-prop.name=value instead of -Dname=value.
# To set system properties for unit tests define test-sys-prop.name=value:
run.patch=@../../../build/run.args
run.jvmargs=${run.patch}
run.test.classpath=\
    ${javac.test.classpath}:\
    ${build.test.classes.dir}
source.encoding=UTF-8
src.java.dir=src/app/java
src.java2.dir=src/generated/java
src.java3.dir=src/compiletime/java
src.java4.dir=src/samples/java
src.resources.dir=src/app/resources
src.resources2.dir=src/generated/resources
src.resources3.dir=src/samples/resources
