/*
 * Copyright (c) 2023, 2024, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the LICENSE file that accompanied this code.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */
package com.oracle.tools.fx.monkey.util;

/**
 * Sample text for testing writing systems support.
 * See https://en.wikipedia.org/wiki/List_of_writing_systems
 */
public class WritingSystemsDemo {
    public static final String[] PAIRS = {
        "Arabic", "╪з┘Д╪╣╪▒╪и┘К╪й",
        "Aramaic", "Classical Syriac: ▄Р▄к▄б▄Э▄Р, Old Aramaic: ЁРдАЁРдУЁРдМЁРдЙЁРдА; Imperial Aramaic: ЁРбАЁРбУЁРбМЁРбЙЁРбА; Jewish Babylonian Aramaic: ╫Р╓▓╫и╓╕╫Ю╓┤╫Щ╫ктАО",
        "Akkadian", "ЁТАЭЁТЕЧЁТБ║ЁТМС",
        "Armenian", "╒░╒б╒╡╒е╓А╒з╒╢/╒░╒б╒╡╒е╓А╒е╒╢",
        "Assamese", "ржЕрж╕ржорзАржпрж╝рж╛",
        "Awadhi", "рдЕрд╡рдзреА/рдФрдзреА",
        "Azerbaijanis", "╪в╪░╪▒╪и╪з█М╪м╪з┘Ж┘Д█М┘Д╪з╪▒",
        "Bagheli", "рдмрдШреЗрд▓реА",
        "Bagri", "рдмрд╛рдЧрдбрд╝реА, ╪и╪з┌п┌С█М",
        "Bengali", "ржмрж╛ржВрж▓рж╛",
        "Bhojpuri", "ЁСВжЁСВ╖ЁСВФЁСВгЁСВ│ЁСВйЁСВ▓",
        "Braille", "таГтаЧтаЗ",
        "Bundeli", "рдмреБрдиреНрджреЗрд▓реА",
        "Burmese", "сАЩсА╝сАФсА║сАЩсАм",
        "Cherokee", "сПгсО│сОй сОжсПмсПВсОпсПНсПЧ",
        "Chhattisgarhi", "рдЫрддреНрддреАрд╕рдЧрдврд╝реА, рмЫрмдрм┐рм╢рмЧрмбрм╝рм┐, рм▓рм░рм┐рмЖ",
        "Chinese", "ф╕нцЦЗ",
        "Czech", "─Мe┼бtina",
        "Devanagari", "рджреЗрд╡рдирд╛рдЧрд░реА",
        "Dhivehi", "▐Л▐и▐И▐м▐А▐и",
        "Dhundhari", "рдвреВрдгреНрдврд╛рдбрд╝реА/ркврлВркгрлНркврк╛ркбрк╝рлА",
        "Farsi", "┘Б╪з╪▒╪│█М",
        "Garhwali", "рдЧрдврд╝рд╡рд│рд┐",
        "Ge╩╜ez", "сМНсЛХсЛЭ",
        "Greek", "╬Х╬╗╬╗╬╖╬╜╬╣╬║╬м",
        "Georgian", "сГесГРсГасГЧсГгсГЪсГШ",
        "Gujarati", "ркЧрлБркЬрк░рк╛ркдрлА",
        "Harauti", "рд╣рд╛рдбрд╝реМрддреА, рд╣рд╛рдбрд╝реЛрддреА",
        "Haryanvi", "рд╣рд░рдпрд╛рдгрд╡реА",
        "Hausa", "┘З┘О╪▒┘Т╪┤┘Ь┘Ж ┘З┘О┘И┘Т╪│┘О",
        "Hebrew", "╫в╫С╫и╫Щ╫к",
        "Hindi", "рд╣рд┐рдиреНрджреА",
        "Inuktitut", "сРГсУДсТГсСОсСРсСж",
        "Japanese", "цЧецЬмшкЮ уБЛуБк уВлуГК",
        "Kangri", "рдХрд╛рдВрдЧрдбрд╝реА",
        "Kannada", "р▓Хр▓ир│Нр▓ир▓б",
        "Kashmiri", "┘Г┘▓╪┤┘П╪▒рдХреЙрд╢реБрд░ЁСЖСЁСЖ│ЁСЖпЁСЖ╢ЁСЖлЁСЗА",
        "Khmer", "сЮБсЯТсЮШсЯВсЮЪ",
        "Khortha", "рдЦреЛрд░рдард╛",
        "Khowar", "┌й┌╛┘И┘И╪з╪▒ ╪▓╪и╪з┘Ж",
        "Korean", "эХЬъ╡ньЦ┤",
        "Kumaoni", "рдХреБрдорд╛рдКрдБрдиреА",
        "Kurdish", "Kurd├о / ┌й┘И╪▒╪п█М",
        "Magahi", "ЁСВзЁСВПЁСВпЁСВ▓/ЁСВзЁСВПЁСВбЁСВ▓",
        "Maithili", "рдореИрдерд┐рд▓реА",
        "Malayalam", "р┤ор┤▓р┤пр┤╛р┤│р┤В",
        "Malvi", "рдорд╛рд│рд╡реА рднрд╛рд╖рд╛ / ркорк╛рк│рк╡рлА ркнрк╛рк╖рк╛",
        "Marathi", "рдорд░рд╛рдареА",
        "Marwari,", "рдорд╛рд░рд╡рд╛рдбрд╝реА",
        "Meitei", "ъпГъпйъпЗъпйъпВъпгъпЯ",
        "Mewari", "рдореЗрд╡рд╛рдбрд╝реА/ркорлЗрк╡рк╝рк╛ркбрк╝рлА",
        "Mongolian", "саисавса╖садсансад",
        "Nimadi", "рдирд┐рдорд╛рдбрд╝реА",
        "Odia", "рмУрмбрм╝рм┐рмЖ",
        "Pahari", "рдкрд╣рд╛рдбрд╝реА ┘╛█Б╪з┌С█М ",
        "Pashto", "┘╛┌Ъ╪к┘И",
        "Punjabi", "рикрй░риЬри╛римрйА┘╛┘Ж┘Ш╪м╪з╪и█М",
        "Rajasthani", "рд░рд╛рдЬрд╕реНрдерд╛рдиреА",
        "Russian", "╨а╤Г╤Б╤Б╨║╨╕╨╣",
        "Sanskrit", "рд╕рдВрд╕реНрдХреГрдд-, рд╕рдВрд╕реНрдХреГрддрдореН",
        "Santali", "с▒ес▒Яс▒▒с▒Ыс▒Яс▒▓с▒д",
        "Sindhi", "╪│┘Р┘Ж┌М┘Р┘КтАО тАв рд╕рд┐рдиреНрдзреА",
        "Suret", "▄г▄Ш▄к▄Э▄м",
        "Surgujia", "рд╕рд░рдЧреБрдЬрд┐рдпрд╛",
        "Surjapuri", "рд╕реБрд░рдЬрд╛рдкреБрд░реА, рж╕рзБрж░ржЬрж╛ржкрзБрж░рзА",
        "Tamil", "родрооро┐ро┤рпН",
        "Telugu", "р░др▒Жр░▓р▒Бр░Чр▒Б",
        "Thaana", "▐Л▐и▐И▐м▐А▐и",
        "Thai", "р╣Др╕Чр╕в",
        "Tibetan", "р╜Цр╜╝р╜Ср╝Л",
        "Tulu", "р▓др│Бр▓│р│Б",
        "Turoyo", "▄Ы▄Ш▄к▄Э▄Р",
        "Ukrainian", "╨г╨║╤А╨░╤Ч╨╜╤Б╤М╨║╨░",
        "Urdu", "╪з╪▒╪п┘И",
        "Vietnamese", "Tiс║┐ng Viс╗Зt",
        "Yiddish", "╫Щ╫Щ╓┤╫У╫Щ╫й ╫Щ╫Щ╫У╫Щ╫й  ╫Р╫Щ╫У╫Щ╫й"
    };

    public static String getText(boolean showUnicode) {
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < PAIRS.length;) {
            String a = PAIRS[i++];
            String b = PAIRS[i++];
            t(sb, a, b, showUnicode);
        }
        return sb.toString();
    }

    private static void t(StringBuilder sb, String name, String text, boolean showUnicode) {
        sb.append(name);
        sb.append(": ");
        sb.append(text);
        if (showUnicode) {
            sb.append(" (");
            native2ascii(sb, text);
            sb.append(")");
        }
        sb.append("\n");
    }

    private static void native2ascii(StringBuilder sb, String text) {
        for (char c: text.toCharArray()) {
            if (c < 0x20) {
                escape(sb, c);
            } else if (c > 0x7f) {
                escape(sb, c);
            } else {
                sb.append(c);
            }
        }
    }

    private static void escape(StringBuilder sb, char c) {
        sb.append("\\u");
        sb.append(h(c >> 12));
        sb.append(h(c >> 8));
        sb.append(h(c >> 4));
        sb.append(h(c));
    }

    private static char h(int d) {
        return "0123456789abcdef".charAt(d & 0x000f);
    }
}
