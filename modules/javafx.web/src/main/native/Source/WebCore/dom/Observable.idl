/*
 * Copyright (C) 2024 Keith Cirkel <webkit@keithcirkel.co.uk>. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS''
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 */
// https://github.com/WICG/observable
typedef (SubscriptionObserverCallback or SubscriptionObserver) ObserverUnion;
typedef (SubscriptionObserverCallback or ObservableInspector) ObservableInspectorUnion;

[
  Exposed=(Window,Worker),
  EnabledBySetting=ObservableEnabled
]
interface Observable {
  constructor(SubscriberCallback callback);

  [CallWith=CurrentScriptExecutionContext, RaisesException] undefined subscribe(optional ObserverUnion observer = {}, optional SubscribeOptions options = {});

  // Observable-returning operators.

  [CallWith=CurrentScriptExecutionContext] Observable map(MapperCallback mapper);
  [CallWith=CurrentScriptExecutionContext] Observable filter(PredicateCallback predicate);
  [CallWith=CurrentScriptExecutionContext] Observable take(unsigned long long amount);
  [CallWith=CurrentScriptExecutionContext] Observable drop(unsigned long long amount);
  [CallWith=CurrentScriptExecutionContext] Observable inspect(optional ObservableInspectorUnion inspectorUnion = {});

  // Promise-returning operators.

  [CallWith=CurrentScriptExecutionContext] Promise<any> first(optional SubscribeOptions options = {});
  [CallWith=CurrentScriptExecutionContext] Promise<undefined> forEach(VisitorCallback callback, optional SubscribeOptions options = {});
  [CallWith=CurrentScriptExecutionContext] Promise<any> last(optional SubscribeOptions options = {});
  [CallWith=CurrentScriptExecutionContext] Promise<any> find(PredicateCallback callback, optional SubscribeOptions options = {});
  [CallWith=CurrentScriptExecutionContext] Promise<boolean> every(PredicateCallback callback, optional SubscribeOptions options = {});
  [CallWith=CurrentScriptExecutionContext] Promise<boolean> some(PredicateCallback callback, optional SubscribeOptions options = {});
  [CallWith=CurrentScriptExecutionContext] Promise<any> reduce(ReducerCallback callback, optional any initialValue, optional SubscribeOptions options = {});
};
